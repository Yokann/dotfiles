// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Pane",
    "bindings": {
      "alt-d": "pane::CloseActiveItem"
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      "space t r": "project_panel::ToggleFocus",
      "space t t": "workspace::ToggleLeftDock",
      "space space": "file_finder::Toggle"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "space t r": "project_panel::ToggleFocus",
      "space t t": "workspace::ToggleLeftDock",
      "space space": "file_finder::Toggle",
      "a": "project_panel::NewFile",
      "r": "project_panel::Rename",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "d": "project_panel::Delete",
      "D": "project_panel::Trash",
      "x": "project_panel::Cut"
    }
  },
  {
    "context": "DebugPanel",
    "bindings": {
      "alt-d": "workspace::CloseActiveDock"
    }
  },
  {
    "context": "AgentPanel",
    "bindings": {
      "alt-d": "workspace::CloseActiveDock",
      "alt-/": "agent::ToggleModelSelector",
      "alt-p": "agent::ToggleProfileSelector",
      "alt-c": "agent::ToggleContextPicker"
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "space space": "file_finder::Toggle",
      "space t e": "outline::Toggle",
      "alt-j": "pane::GoBack",
      "alt-k": "pane::GoForward",
      "alt-h": "pane::ActivatePreviousItem",
      "alt-l": "pane::ActivateNextItem",
      "alt-d": "pane::CloseActiveItem",
      "space t r": "project_panel::ToggleFocus",
      "space t t": "workspace::ToggleLeftDock",
      "space d d": "workspace::ToggleBottomDock",
      "space c c": "editor::ToggleCodeActions",
      "g t d": "editor::GoToTypeDefinition",
      "g i": "editor::GoToImplementation",
      "g r": "editor::FindAllReferences",
      "f m t": "editor::Format",
      "K": "editor::Hover",
      "ctrl-r": "editor::Redo",
      "space c t": "agent::ToggleFocus",
      "space b d": "pane::CloseInactiveItems",
      "space g g": "workspace::NewSearch",
      "F1": "debug_panel::ToggleFocus",
      "F9": "debugger::Start",
      "F3": "editor::ToggleBreakpoint",
      "F5": "debugger::StepOver",
      "F4": "debugger::StepInto",
      "space d R": "debugger::RunToCursor",
      "space d e": "debugger::EvaluateSelectedText",
      "space d x": "debugger::Stop",
      "space g i t": "git_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "alt-k": "editor::ContextMenuPrevious",
      "alt-j": "editor::ContextMenuNext"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "k j": ["workspace::SendKeystrokes", "escape"],
      "space e": "editor::ShowCompletions"
    }
  },
  {
    "context": "Editor && vim_mode == visual",
    "bindings": {
      "k j": ["workspace::SendKeystrokes", "escape"],
      "J": "editor::MoveLineDown",
      "K": "editor::MoveLineUp",
      "ctrl-w": "editor::SelectLargerSyntaxNode",
      "ctrl-shift-w": "editor::SelectSmallerSyntaxNode"
    }
  }
]
