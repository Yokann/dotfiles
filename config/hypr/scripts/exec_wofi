#!/bin/sh

function app_launcher(){
    wofi --show drun
}

function audio_switcher(){
    outputs=$(pactl --format json list sinks | jq '.[] |  {id: .index, desc: .description}' | jq -s '.')

    selection=$(echo $outputs | jq -r '.[] | .desc' | wofi --show dmenu)
    ouput_id=$(echo $outputs | jq -r ".[] | select(.desc == \"$selection\") | .id")

    if [ -n "$ouput_id" ]; then
        pactl set-default-sink $ouput_id
    fi
}

function audio_profile(){
    current_device=$(pactl --format json list sinks | jq '.[] | select(.state == "RUNNING") | {id: .index, device: .properties["device.name"]}')
    name=$(echo $current_device | jq -r '.device')
    profiles=$(pactl --format json list cards | jq -r '.[] | select(.properties["device.name"] == "'$name'") | .profiles | keys')
    profile=$(echo $profiles | jq -r 'join("\n")' | wofi --show dmenu)
    if [ -n "$profile" ]; then 
        pactl set-card-profile $name $profile
    fi
}

function wifi_menu(){
    nm-connection-editor &
}

doc() {
    echo "Usage:
    set_env [Options]

    Options:
        application_launcher    Runs wofi application launcher
        wifi                    Runs wofi wifi menu"
}


killall wofi

case $1 in 
  application_launcher) app_launcher   ;;
  wifi)                 wifi_menu   ;;
  audio_switcher)       audio_switcher ;;
  audio_profile)        audio_profile ;;
  *) doc                            ;;
esac
